==================
SILVA <VERSION> README
==================

SilVA: Silent variant analysis using random forests.
"When a synonymous mutation falls in the exome, does it make a sound?"


SilVA is a tool for the automated harmfulness prediction of SYNONYMOUS single-nucleotide variants. Given variants in a VCF file, SilVA will rank the rare synonymous variants according to their predicted harmfulness. SilVA predicts the harmfulness of mutations using features that include CpG, codon usage, splice sites, splicing enhancers and suppressors, and mRNA folding free energy.

If you use this tool, please cite:

    Buske OJ, Manickaraj A, Mital S, Brudno M. (2012)
    Identification of deleterious synonymous variants in human genomes.
    In preparation.

Send questions, comments, and difficulties to: silva@cs.toronto.edu


Quickstart
==========

1. Download SilVA:

    wget http://compbio.cs.toronto.edu/silva/release/silva-<VERSION>.tar.gz
    tar -xzf silva-<VERSION>.tar.gz
    cd silva-<VERSION>

2. Install dependencies:

    ./setup.sh

3. Preprocess VCF file:

    ./preprocess_vcf VCF OUTDIR

4. Run models and print highest-scoring synonymous variants:

    ./run OUTDIR | head


Overview
========

Prerequisites
-------------
- Linux x86
- 6GB of RAM
- Python 2.6 or 2.7 in your PATH
-- The 'numpy' Python package
- Perl in your PATH (for maxentscan)
- Java in your PATH (for weka)

Dependencies
------------
SilVA requires several tools and databases to run. Most of these were included with this release, but the 'setup.sh' script will download and configure the rest.

- included: milk 0.4.2 Python package, with slight modification, available from:
  http://pypi.python.org/pypi/milk/
- included: weka 3.6.6 machine learning toolkit, available from:
  http://www.cs.waikato.ac.nz/ml/weka/
- included: maxentscan, available from:
  http://genes.mit.edu/burgelab/maxent/download/
- setup.sh: UNAfold, available from:
  http://mfold.rna.albany.edu/?q=DINAMelt/software
- setup.sh: SilVA databases, available from:
  http://compbio.cs.toronto.edu/silva/release/silva-<VERSION>_data.tar.gz

* Note: if you have UNAfold or the SilVA databases already installed, you can point SilVA to them by changing the appropriate lines in the 'config.sh' file.

Input File Format
-----------------
Single-nucleotide variants should be given to SilVA in VCF or a VCF-like file format. There should be one line per variant, with tab-delimited fields:

1. chrom - chromosome (any 'chr' prefix will be trimmed)
2. pos - the position of the variant, 1-indexed
3. id - the id field is ignored, but is here to provide compatibility with the VCF format.
4. ref - the reference nucleotide
5. alt - the alternate nucleotide (if multiple are present, comma-separated, only the first will be used)
... Additional columns can be present and are ignored

Output Format
-------------
SilVA will print the synonymous variants to stdout, ordered by score, with the variants most likely to be harmful listed first. Variants are first filtered down to just rare and novel synonymous variants. The variants are then annotated with a number of features and several pre-trained models are used to rank the variants.

1. Score (the mean rank)
2. Range of ranks assigned from the various models (min, median, max)
3. Potentially-important features.*
... Fields from the input file

* More specifically, these are features for which this variants had a value at least 3 standard deviations away from the mean in the control data. This field is intended as a helpful guess at the features that might have been important in classifying that variant as harmful. In reality, it may be nonlinear interactions between variables that result in a high score, but this is not captured in this field. A list of all the features and their descriptions is available in the paper.


Installation
============

SilVA is packaged with most of its dependencies. The remaining few can be downloaded and configured by running the 'setup.sh' script from the root directory of this package:

1. Download, untar, and unzip the package tarball:

    wget http://compbio.cs.toronto.edu/silva/release/silva-<VERSION>.tar.gz
    tar -xzf silva-<VERSION>.tar.gz
    cd silva-<VERSION>

2. Run the setup script in the package's root directory:

    ./setup.sh

* SilVA uses a number of environment variables to communicate important paths and parameters, such as what directory to use for temporary files, what allele frequency threshold to use, and where UNAfold is installed. SilVA has default settings that should work, but will defer to any settings in your environment (so you can hard-code values by exporting variables in your ~/.bashrc, for example). To see a list of these variables or to change their settings, see the 'config.sh' script.


Running SilVA
=============

SilVA should be run from the root directory of the package. If you insist on running it from elsewhere, you must set SILVA_PATH appropriately in your environment. 

In addition to running SilVA on your local machine, we provide a convenience script to dispatch multiple SilVA runs across an SGE cluster. SilVA uses TMPDIR for all temporary files. If TMPDIR is not set, it will use the current directory. 

Local machine
-------------
To run SilVA on your local machine, you should have already downloaded dependencies with the 'setup.sh' script. You can then run SilVA on your file of variants, <VCF>, (see Input Format) from the root directory of this package:

1. Filter an annotate the variants in the VCF file:

    ./preprocess_vcf <VCF> <OUTDIR>

2. Run the trained models on the annotated variants and print the top variants in order of decreasing predicted harmfulness:

    ./run <OUTDIR> | head

SilVA should handle errors and early termination gracefully, so if something goes wrong, you can re-run the same command and it will pick up where it left off.

SGE Cluster
-----------
In case you have a large number of VCF files and an SGE cluster, we have provided a dispatch script for your convenience, 'sge/dispatch.sh'. Because SGE configurations vary widely, you should first open the file and take a look at the three SGE configuration variables at the top of the script. Edit them as you see fit. You can then dispatch SGE jobs for a number of VCF files from the root directory of the package with:

    ./sge/dispatch.sh <OUTDIR> <VCF1> <VCF2> ...


Support
=======

Send questions, comments, and difficulties to: silva@cs.toronto.edu
